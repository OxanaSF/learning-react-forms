{"ast":null,"code":"import useInput from \"../hooks/use-input\"; // const InputData = (props) => {\n\nconst isNotEmpty = value => value ? value.trim() !== \"\" : \"\";\n\nconsole.log(isNotEmpty(\"\"));\nconst regEx = /[a-zA-Z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,8}(.[a-z{2,8}])?/g;\n\nconst isEmail = value => regEx.test(value);\n\nconst {\n  value: firstNameValue,\n  isValid: firstNameIsValid,\n  hasError: firstNameHasError,\n  valueChangeHandler: firstNameChangeHandler,\n  inputBlurHandler: firstNameBlurHandler,\n  reset: resetFirstName\n} = useInput(isNotEmpty);\nconsole.log(useInput(isNotEmpty));\nconst {\n  value: lastNameValue,\n  isValid: lastNameIsValid,\n  hasError: lastNameHasError,\n  valueChangeHandler: lastNameChangeHandler,\n  inputBlurHandler: lastNameBlurHandler,\n  reset: resetLastName\n} = useInput(isNotEmpty);\nconst {\n  value: emailValue,\n  isValid: emailIsValid,\n  hasError: emailHasError,\n  valueChangeHandler: emailChangeHandler,\n  inputBlurHandler: emailBlurHandler,\n  reset: resetEmail\n} = useInput(isEmail); //   let formIsValid = false;\n//   if (lastNameIsValid && emailIsValid) {\n//     formIsValid = true;\n//   }\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     if (!formIsValid) {\n//       return;\n//     }\n//     console.log(\"Sumbitted!\");\n//     console.log(firstNameValue, lastNameValue, emailValue);\n//     resetFirstName();\n//     resetLastName();\n//     resetEmail();\n//   };\n\nconst firstNameClasses = firstNameHasError ? \"form-control invalid\" : \"form-control\";\nconst lastNameClasses = lastNameHasError ? \"form-control invalid\" : \"form-control\";\nconst emailClasses = emailHasError ? \"form-control invalid\" : \"form-control\";\nexport const inputData = [{\n  className: firstNameClasses,\n  id: \"fname\",\n  type: \"text\",\n  value: firstNameValue,\n  content: \"First Name\",\n  onChange: firstNameChangeHandler,\n  onBlur: firstNameBlurHandler,\n  hasError: firstNameHasError,\n  par: \"Please enter a first name.\"\n}, {\n  className: lastNameClasses,\n  id: \"lname\",\n  type: \"text\",\n  value: lastNameValue,\n  content: \"Last Name\",\n  onChange: lastNameChangeHandler,\n  onBlur: lastNameBlurHandler,\n  hasError: lastNameHasError,\n  par: \"Please enter a last name.\"\n}, {\n  className: emailClasses,\n  id: \"email\",\n  type: \"text\",\n  value: emailValue,\n  content: \"E-Mail Address\",\n  onChange: emailChangeHandler,\n  onBlur: emailBlurHandler,\n  hasError: emailHasError,\n  par: \"Please enter an email address.\"\n}]; // };","map":{"version":3,"names":["useInput","isNotEmpty","value","trim","console","log","regEx","isEmail","test","firstNameValue","isValid","firstNameIsValid","hasError","firstNameHasError","valueChangeHandler","firstNameChangeHandler","inputBlurHandler","firstNameBlurHandler","reset","resetFirstName","lastNameValue","lastNameIsValid","lastNameHasError","lastNameChangeHandler","lastNameBlurHandler","resetLastName","emailValue","emailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","resetEmail","firstNameClasses","lastNameClasses","emailClasses","inputData","className","id","type","content","onChange","onBlur","par"],"sources":["/Users/oxanahoward/Documents/BitwiseREACT/Projects/learning-react-forms/src/hooks/input-data.js"],"sourcesContent":["import useInput from \"../hooks/use-input\";\n\n// const InputData = (props) => {\n  const isNotEmpty = (value) => (value ? value.trim() !== \"\" : \"\");\n  console.log(isNotEmpty(\"\"));\n\n  const regEx = /[a-zA-Z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,8}(.[a-z{2,8}])?/g;\n  const isEmail = (value) => regEx.test(value);\n\n  const {\n    value: firstNameValue,\n    isValid: firstNameIsValid,\n    hasError: firstNameHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstName,\n  } = useInput(isNotEmpty);\n  console.log(useInput(isNotEmpty));\n\n  const {\n    value: lastNameValue,\n    isValid: lastNameIsValid,\n    hasError: lastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastName,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: emailValue,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput(isEmail);\n\n//   let formIsValid = false;\n\n//   if (lastNameIsValid && emailIsValid) {\n//     formIsValid = true;\n//   }\n\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n//     if (!formIsValid) {\n//       return;\n//     }\n\n//     console.log(\"Sumbitted!\");\n//     console.log(firstNameValue, lastNameValue, emailValue);\n\n//     resetFirstName();\n//     resetLastName();\n//     resetEmail();\n//   };\n\n  const firstNameClasses = firstNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const lastNameClasses = lastNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailClasses = emailHasError ? \"form-control invalid\" : \"form-control\";\n\n  export const inputData = [\n    {\n      className: firstNameClasses,\n      id: \"fname\",\n      type: \"text\",\n      value: firstNameValue,\n      content: \"First Name\",\n      onChange: firstNameChangeHandler,\n      onBlur: firstNameBlurHandler,\n      hasError: firstNameHasError,\n      par: \"Please enter a first name.\",\n    },\n    {\n      className: lastNameClasses,\n      id: \"lname\",\n      type: \"text\",\n      value: lastNameValue,\n      content: \"Last Name\",\n      onChange: lastNameChangeHandler,\n      onBlur: lastNameBlurHandler,\n      hasError: lastNameHasError,\n      par: \"Please enter a last name.\",\n    },\n    {\n      className: emailClasses,\n      id: \"email\",\n      type: \"text\",\n      value: emailValue,\n      content: \"E-Mail Address\",\n      onChange: emailChangeHandler,\n      onBlur: emailBlurHandler,\n      hasError: emailHasError,\n      par: \"Please enter an email address.\",\n    },\n  ];\n\n\n\n\n\n// };\n\n\n\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oBAArB,C,CAEA;;AACE,MAAMC,UAAU,GAAIC,KAAD,IAAYA,KAAK,GAAGA,KAAK,CAACC,IAAN,OAAiB,EAApB,GAAyB,EAA7D;;AACAC,OAAO,CAACC,GAAR,CAAYJ,UAAU,CAAC,EAAD,CAAtB;AAEA,MAAMK,KAAK,GAAG,0DAAd;;AACA,MAAMC,OAAO,GAAIL,KAAD,IAAWI,KAAK,CAACE,IAAN,CAAWN,KAAX,CAA3B;;AAEA,MAAM;EACJA,KAAK,EAAEO,cADH;EAEJC,OAAO,EAAEC,gBAFL;EAGJC,QAAQ,EAAEC,iBAHN;EAIJC,kBAAkB,EAAEC,sBAJhB;EAKJC,gBAAgB,EAAEC,oBALd;EAMJC,KAAK,EAAEC;AANH,IAOFnB,QAAQ,CAACC,UAAD,CAPZ;AAQAG,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACC,UAAD,CAApB;AAEA,MAAM;EACJC,KAAK,EAAEkB,aADH;EAEJV,OAAO,EAAEW,eAFL;EAGJT,QAAQ,EAAEU,gBAHN;EAIJR,kBAAkB,EAAES,qBAJhB;EAKJP,gBAAgB,EAAEQ,mBALd;EAMJN,KAAK,EAAEO;AANH,IAOFzB,QAAQ,CAACC,UAAD,CAPZ;AASA,MAAM;EACJC,KAAK,EAAEwB,UADH;EAEJhB,OAAO,EAAEiB,YAFL;EAGJf,QAAQ,EAAEgB,aAHN;EAIJd,kBAAkB,EAAEe,kBAJhB;EAKJb,gBAAgB,EAAEc,gBALd;EAMJZ,KAAK,EAAEa;AANH,IAOF/B,QAAQ,CAACO,OAAD,CAPZ,C,CASF;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEE,MAAMyB,gBAAgB,GAAGnB,iBAAiB,GACtC,sBADsC,GAEtC,cAFJ;AAGA,MAAMoB,eAAe,GAAGX,gBAAgB,GACpC,sBADoC,GAEpC,cAFJ;AAGA,MAAMY,YAAY,GAAGN,aAAa,GAAG,sBAAH,GAA4B,cAA9D;AAEA,OAAO,MAAMO,SAAS,GAAG,CACvB;EACEC,SAAS,EAAEJ,gBADb;EAEEK,EAAE,EAAE,OAFN;EAGEC,IAAI,EAAE,MAHR;EAIEpC,KAAK,EAAEO,cAJT;EAKE8B,OAAO,EAAE,YALX;EAMEC,QAAQ,EAAEzB,sBANZ;EAOE0B,MAAM,EAAExB,oBAPV;EAQEL,QAAQ,EAAEC,iBARZ;EASE6B,GAAG,EAAE;AATP,CADuB,EAYvB;EACEN,SAAS,EAAEH,eADb;EAEEI,EAAE,EAAE,OAFN;EAGEC,IAAI,EAAE,MAHR;EAIEpC,KAAK,EAAEkB,aAJT;EAKEmB,OAAO,EAAE,WALX;EAMEC,QAAQ,EAAEjB,qBANZ;EAOEkB,MAAM,EAAEjB,mBAPV;EAQEZ,QAAQ,EAAEU,gBARZ;EASEoB,GAAG,EAAE;AATP,CAZuB,EAuBvB;EACEN,SAAS,EAAEF,YADb;EAEEG,EAAE,EAAE,OAFN;EAGEC,IAAI,EAAE,MAHR;EAIEpC,KAAK,EAAEwB,UAJT;EAKEa,OAAO,EAAE,gBALX;EAMEC,QAAQ,EAAEX,kBANZ;EAOEY,MAAM,EAAEX,gBAPV;EAQElB,QAAQ,EAAEgB,aARZ;EASEc,GAAG,EAAE;AATP,CAvBuB,CAAlB,C,CAwCT"},"metadata":{},"sourceType":"module"}